name: Documentation

on:
  push:
    branches: [ main ]
    paths:
      - 'Sources/**'
      - 'Package.swift'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'Sources/**'
      - 'Package.swift'
  workflow_dispatch:

env:
  DEVELOPER_DIR: /Applications/Xcode_15.0.app/Contents/Developer

jobs:
  build-docs:
    name: Build Documentation
    runs-on: macos-14
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_15.0.app/Contents/Developer
      
    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-docs-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-docs-
          ${{ runner.os }}-spm-
          
    - name: Build package
      run: swift build
      
    - name: Generate documentation
      run: |
        swift package generate-documentation \
          --target SwinJectMacros \
          --output-path docs \
          --transform-for-static-hosting \
          --hosting-base-path SwinJectMacros \
          --include-extended-types
          
    - name: Generate documentation index
      run: |
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>SwinJectMacros Documentation</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 40px 20px;
                }
                .header {
                    text-align: center;
                    margin-bottom: 50px;
                }
                .logo {
                    font-size: 3em;
                    font-weight: bold;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    -webkit-background-clip: text;
                    -webkit-text-fill-color: transparent;
                    margin-bottom: 20px;
                }
                .subtitle {
                    font-size: 1.2em;
                    color: #666;
                    margin-bottom: 30px;
                }
                .nav-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                    margin: 40px 0;
                }
                .nav-card {
                    background: #f8f9fa;
                    border: 1px solid #e9ecef;
                    border-radius: 8px;
                    padding: 20px;
                    text-decoration: none;
                    color: #333;
                    transition: all 0.2s ease;
                }
                .nav-card:hover {
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
                    text-decoration: none;
                    color: #333;
                }
                .nav-card h3 {
                    margin: 0 0 10px 0;
                    color: #667eea;
                }
                .nav-card p {
                    margin: 0;
                    color: #666;
                    font-size: 0.9em;
                }
                .features {
                    margin: 40px 0;
                }
                .features ul {
                    list-style: none;
                    padding: 0;
                }
                .features li {
                    padding: 10px 0;
                    border-bottom: 1px solid #eee;
                }
                .features li:before {
                    content: "✨";
                    margin-right: 10px;
                }
                .github-link {
                    text-align: center;
                    margin-top: 40px;
                }
                .github-link a {
                    display: inline-block;
                    background: #333;
                    color: white;
                    padding: 12px 24px;
                    border-radius: 6px;
                    text-decoration: none;
                    font-weight: 500;
                }
                .github-link a:hover {
                    background: #555;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <div class="logo">SwinJectMacros</div>
                <div class="subtitle">Advanced Dependency Injection Utilities for Swift</div>
            </div>
            
            <div class="nav-grid">
                <a href="documentation/swinjectmacros/" class="nav-card">
                    <h3>📚 API Documentation</h3>
                    <p>Complete API reference with examples and usage guides</p>
                </a>
                
                <a href="#getting-started" class="nav-card">
                    <h3>🚀 Getting Started</h3>
                    <p>Quick start guide and installation instructions</p>
                </a>
                
                <a href="#examples" class="nav-card">
                    <h3>💡 Examples</h3>
                    <p>Real-world usage examples and best practices</p>
                </a>
                
                <a href="#migration" class="nav-card">
                    <h3>🔄 Migration Guide</h3>
                    <p>Upgrade guides and breaking changes</p>
                </a>
            </div>
            
            <div class="features">
                <h2>✨ Features</h2>
                <ul>
                    <li><strong>25+ Macro Utilities</strong> - Comprehensive dependency injection patterns</li>
                    <li><strong>SwiftUI Integration</strong> - First-class support for SwiftUI applications</li>
                    <li><strong>Testing Infrastructure</strong> - Built-in spies, mocks, and validation</li>
                    <li><strong>Thread-Safe</strong> - All implementations are thread-safe by default</li>
                    <li><strong>Performance Monitoring</strong> - Built-in metrics and performance tracking</li>
                    <li><strong>Type Safe</strong> - Compile-time validation prevents runtime errors</li>
                    <li><strong>Zero Runtime Overhead</strong> - Compile-time code generation</li>
                    <li><strong>Comprehensive Documentation</strong> - Extensive guides and examples</li>
                </ul>
            </div>
            
            <div class="github-link">
                <a href="https://github.com/anthropics/SwinJectMacros" target="_blank">
                    View on GitHub
                </a>
            </div>
        </body>
        </html>
        EOF
        
    - name: Validate documentation
      run: |
        # Check that key documentation files exist
        if [ ! -f "docs/documentation/swinjectmacros/index.html" ]; then
          echo "❌ Main documentation not generated"
          exit 1
        fi
        
        # Check documentation size (should be substantial)
        DOC_SIZE=$(du -s docs | cut -f1)
        if [ $DOC_SIZE -lt 100 ]; then
          echo "❌ Documentation seems too small ($DOC_SIZE KB)"
          exit 1
        fi
        
        echo "✅ Documentation validation passed ($DOC_SIZE KB generated)"
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/
        retention-days: 30

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy documentation for ${{ github.sha }}'

  validate-links:
    name: Validate Documentation Links
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/
        
    - name: Install link checker
      run: |
        npm install -g markdown-link-check
        
    - name: Check documentation links
      run: |
        # Find all HTML files and check for broken links
        find docs -name "*.html" -exec echo "Checking {}" \; \
          -exec grep -o 'href="[^"]*"' {} \; | \
          grep -v "^href=\"#" | \
          grep -v "^href=\"javascript:" | \
          sed 's/href="//g' | sed 's/"//g' | \
          sort -u > links.txt
          
        echo "Found $(wc -l < links.txt) unique links to validate"
        
        # Basic validation - check for obviously broken patterns
        if grep -q "undefined\|null\|PLACEHOLDER" links.txt; then
          echo "❌ Found placeholder or undefined links"
          grep "undefined\|null\|PLACEHOLDER" links.txt
          exit 1
        fi
        
        echo "✅ Link validation passed"

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/
        
    - name: Install accessibility checker
      run: |
        npm install -g @axe-core/cli
        
    - name: Check accessibility
      run: |
        # Basic accessibility check on main documentation page
        if [ -f "docs/index.html" ]; then
          echo "Checking accessibility of main page..."
          axe docs/index.html --exit
        else
          echo "⚠️ Main page not found, skipping accessibility check"
        fi

  performance-check:
    name: Documentation Performance
    runs-on: ubuntu-latest
    needs: build-docs
    
    steps:
    - name: Download documentation
      uses: actions/download-artifact@v4
      with:
        name: documentation-${{ github.sha }}
        path: docs/
        
    - name: Check documentation size
      run: |
        # Check total documentation size
        TOTAL_SIZE=$(du -sh docs | cut -f1)
        TOTAL_SIZE_KB=$(du -s docs | cut -f1)
        
        echo "📊 Documentation Statistics:"
        echo "Total size: $TOTAL_SIZE ($TOTAL_SIZE_KB KB)"
        echo "Files: $(find docs -type f | wc -l)"
        echo "HTML files: $(find docs -name "*.html" | wc -l)"
        echo "CSS files: $(find docs -name "*.css" | wc -l)"
        echo "JS files: $(find docs -name "*.js" | wc -l)"
        echo "Images: $(find docs -name "*.png" -o -name "*.jpg" -o -name "*.svg" | wc -l)"
        
        # Warn if documentation is unusually large
        if [ $TOTAL_SIZE_KB -gt 50000 ]; then
          echo "⚠️ Documentation is quite large ($TOTAL_SIZE). Consider optimization."
        elif [ $TOTAL_SIZE_KB -gt 100000 ]; then
          echo "❌ Documentation is too large ($TOTAL_SIZE). This may cause performance issues."
          exit 1
        else
          echo "✅ Documentation size is reasonable"
        fi
        
    - name: Find large files
      run: |
        echo "📁 Largest files in documentation:"
        find docs -type f -exec du -h {} + | sort -hr | head -20